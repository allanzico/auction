// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          UserRole?
  hashedPassword String?
  // accounts      Account[]
  sessions      Session[]
  // Authenticator Authenticator[]
  favoriteLots  FavoriteLot[]
  auctions      Auction[]
  bids          Bid[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

enum UserRole {
admin
user
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  // user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id            String   @id @default(cuid())
  userId       String
  expiresAt      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  // user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Bid {
  id        String   @id @default(cuid())
  amount    Float
  userId    String
  lotId     String
  user      User     @relation(fields: [userId], references: [id])
  lot       Lot      @relation(fields: [lotId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lot {
  id          String      @id @default(cuid())
  name        String
  startingBid Float       @default(0)
  highestBid  Float       @default(0)
  reservePrice Float?
  file        String
  categoryId  String
  category    LotCategory @relation(fields: [categoryId], references: [id])
  auctionId   String
  auction     Auction     @relation(fields: [auctionId], references: [id])
  bids        Bid[]
  favorited FavoriteLot[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model LotCategory {
  id        String   @id @default(cuid())
  name      String
  lots      Lot[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Auction {
  id         String   @id @default(cuid())
  name       String
  file       String
  userId     String
  locationId String
  location   Location @relation(fields: [locationId], references: [id])
  startDate  DateTime
  endDate    DateTime
  user       User     @relation(fields: [userId], references: [id])
  lots       Lot[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model FavoriteLot {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  user      User     @relation(fields: [userId], references: [id])
  lot       Lot      @relation(fields: [lotId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id        String    @id @default(cuid())
  country   String
  city      String
  auctions  Auction[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
